#include <iostream>
#include <vector>
#include <climits>

using namespace std;

#define V 5

void PrimMST(int graph[V][V]) {
    int parent[V];
    int key[V];
    bool inMST[V];

    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        inMST[i] = false;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < V - 1; count++) {
        int u = -1;
        int minKey = INT_MAX;
        for (int v = 0; v < V; v++) {
            if (!inMST[v] && key[v] < minKey) {
                minKey = key[v];
                u = v;
            }
        }

        inMST[u] = true;

        for (int v = 0; v < V; v++) {
            if (graph[u][v] && !inMST[v] && graph[u][v] < key[v]) {
                key[v] = graph[u][v];
                parent[v] = u;
            }
        }
    }

    int totalWeight = 0;
    cout << "Minimum Spanning Tree edges:\n";
    for (int i = 1; i < V; i++) {
        cout << (char)(parent[i] + 'A') << " - " << (char)(i + 'A') << " : " << graph[i][parent[i]] << endl;
        totalWeight += graph[i][parent[i]];
    }
    cout << "Total Weight of MST: " << totalWeight << endl;
}

int main() {
    int graph[V][V] = {
        {0, 5, 10, 15, 0},
        {5, 0, 20, 30, 0},
        {10, 20, 0, 25, 5},
        {15, 30, 25, 0, 10},
        {0, 0, 5, 10, 0}
    };

    PrimMST(graph);

    return 0;
}
