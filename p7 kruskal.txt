#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Edge {
    int src, dest, weight;
};

struct Subset {
    int parent, rank;
};

int find(Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

void Union(Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);
    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

void KruskalMST(vector<Edge>& edges, int V) {
    sort(edges.begin(), edges.end(), [](Edge a, Edge b) {
        return a.weight < b.weight;
    });

    Subset* subsets = new Subset[V];
    for (int v = 0; v < V; ++v) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    vector<Edge> result;
    for (Edge& edge : edges) {
        int x = find(subsets, edge.src);
        int y = find(subsets, edge.dest);
        if (x != y) {
            result.push_back(edge);
            Union(subsets, x, y);
        }
    }

    int totalWeight = 0;
    cout << "Minimum Spanning Tree edges:\n";
    for (Edge& edge : result) {
        cout << (char)(edge.src + 'A') << " - " << (char)(edge.dest + 'A') << " : " << edge.weight << endl;
        totalWeight += edge.weight;
    }
    cout << "Total Weight of MST: " << totalWeight << endl;
}

int main() {
    vector<Edge> edges;
    edges.push_back({0, 1, 5});
    edges.push_back({0, 2, 10});
    edges.push_back({0, 3, 15});
    edges.push_back({1, 2, 20});
    edges.push_back({1, 3, 30});
    edges.push_back({2, 3, 25});
    edges.push_back({2, 4, 5});
    edges.push_back({3, 4, 10});

    int V = 5;
    KruskalMST(edges, V);

    return 0;
}
