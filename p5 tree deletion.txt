#include <iostream>
#include <queue>
using namespace std;

struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int val) : data(val), left(nullptr), right(nullptr) {}
};

TreeNode* insert(TreeNode* root, int value) {
    if (!root) return new TreeNode(value);
    if (value < root->data) root->left = insert(root->left, value);
    else if (value > root->data) root->right = insert(root->right, value);
    return root;
}

TreeNode* deleteNode(TreeNode* root, int value) {
    if (!root) return root;
    if (value < root->data) root->left = deleteNode(root->left, value);
    else if (value > root->data) root->right = deleteNode(root->right, value);
    else {
        if (!root->left) { TreeNode* temp = root->right; delete root; return temp; }
        if (!root->right) { TreeNode* temp = root->left; delete root; return temp; }
        TreeNode* temp = root->right;
        while (temp && temp->left) temp = temp->left;
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

bool search(TreeNode* root, int value) {
    if (!root) return false;
    if (root->data == value) return true;
    return value < root->data ? search(root->left, value) : search(root->right, value);
}

void inorder(TreeNode* root) {
    if (root) { inorder(root->left); cout << root->data << " "; inorder(root->right); }
}

int depth(TreeNode* root) {
    if (!root) return 0;
    return max(depth(root->left), depth(root->right)) + 1;
}

TreeNode* mirror(TreeNode* root) {
    if (!root) return nullptr;
    swap(root->left, root->right);
    mirror(root->left);
    mirror(root->right);
    return root;
}

void levelOrder(TreeNode* root) {
    if (!root) return;
    queue<TreeNode*> q;
    q.push(root);
    while (!q.empty()) {
        TreeNode* node = q.front(); q.pop();
        cout << node->data << " ";
        if (node->left) q.push(node->left);
        if (node->right) q.push(node->right);
    }
    cout << endl;
}

void displayLeafNodes(TreeNode* root) {
    if (!root) return;
    if (!root->left && !root->right) cout << root->data << " ";
    displayLeafNodes(root->left);
    displayLeafNodes(root->right);
}

int main() {
    TreeNode* root = nullptr;
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 70);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 60);
    root = insert(root, 80);

    cout << "In-order: "; inorder(root); cout << endl;
    cout << "Search 40: " << (search(root, 40) ? "Found" : "Not Found") << endl;
    
    root = deleteNode(root, 20);
    cout << "In-order after deletion: "; inorder(root); cout << endl;
    
    cout << "Tree Depth: " << depth(root) << endl;
    
    cout << "Mirror Image: "; mirror(root); inorder(root); cout << endl;

    cout << "Level Order: "; levelOrder(root);
    
    cout << "Leaf Nodes: "; displayLeafNodes(root); cout << endl;

    return 0;
}
