#include <iostream>
#include <vector>
#include <climits>

using namespace std;

#define V 5

void Dijkstra(int graph[V][V], int src) {
    int dist[V];
    bool visited[V];

    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        visited[i] = false;
    }

    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = -1;
        int minDist = INT_MAX;
        for (int i = 0; i < V; i++) {
            if (!visited[i] && dist[i] < minDist) {
                minDist = dist[i];
                u = i;
            }
        }

        visited[u] = true;

        for (int v = 0; v < V; v++) {
            if (graph[u][v] != 0 && !visited[v] && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    cout << "Shortest distances from node " << (char)(src + 'A') << ":\n";
    for (int i = 0; i < V; i++) {
        cout << (char)(i + 'A') << ": ";
        if (dist[i] == INT_MAX) {
            cout << "INF" << endl;
        } else {
            cout << dist[i] << endl;
        }
    }
}

int main() {
    int graph[V][V] = {
        {0, 10, 5, 0, 0},
        {0, 0, 2, 1, 0},
        {0, 3, 0, 9, 0},
        {0, 0, 0, 0, 4},
        {0, 0, 0, 6, 0}
    };

    int src = 0;
    Dijkstra(graph, src);

    return 0;
}
